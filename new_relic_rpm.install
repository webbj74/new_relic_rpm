<?php
/**
 * @file
 * Install and uninstall functions as well as schema definition for the Mollom module.
 */

/**
 * Implements hook_requirements().
 */
function new_relic_rpm_requirements($phase) {
  $requirements = array();
  $t = get_t();

  // Check for curl
  $requirements['curl']= array('title' => $t('Client URL library'));
  if (extension_loaded('curl')) {
    $info = curl_version();
    $requirements['curl'] += array(
      'value' => "libcurl/{$info['version']} {$info['ssl_version']} zlib/{$info['libz_version']}",
      'severity' => REQUIREMENT_OK,
    );
  }
  else {
    $requirements['curl'] += array(
      'value' => $t('not installed'),
      'severity' => REQUIREMENT_ERROR,
      'description' => $t('The Client URL library for PHP is missing or outdated. New Relic RPM Integration requires cURL for communication with rpm.newrelic.com. Please check the <a href="@url">PHP Client URL documentation</a> for information on how to correct this.', array('@url' => 'http://www.php.net/manual/en/book.curl.php')),
    );
  }

  // Check for newrelic
  $requirements['newrelic']= array('title' => $t('New Relic extension'));
  if (extension_loaded('newrelic')) {
    $requirements['newrelic'] += array(
      'value' => phpversion('newrelic'),
      'severity' => REQUIREMENT_OK,
    );
  }
  else {
    $requirements['newrelic'] += array(
      'value' => $t('not installed'),
      'severity' => REQUIREMENT_WARNING,
      'description' => $t('The New Relic Agent extension for PHP is missing or outdated. Some features of New Relic RPM Integration will be disabled. Please check the  <a href="@installation-guide">New Relic for PHP installation instructions</a> for assistance.', array('@installation-guide' => url('https://newrelic.com/docs/php/new-relic-for-php#installation'))),
    );
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function new_relic_rpm_install() {
  // Set New Relic RPM module's weight to very low so we can trigger job state
  // changes early. This can be important in cases like hook_cron().
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query("UPDATE {system} SET weight = -20 WHERE name = 'new_relic_rpm'") */
  db_update('system')
  ->fields(array(
    'weight' => -20,
  ))
  ->condition('name', 'new_relic_rpm')
  ->execute();
}

/**
 * Implements hook_uninstall().
 */
function new_relic_rpm_uninstall() {

  // Remove variables.
  variable_del('new_relic_rpm_track_cron');
  variable_del('new_relic_rpm_ignore_urls');
  variable_del('new_relic_rpm_bg_urls');
  variable_del('new_relic_rpm_exclusive_urls');
  variable_del('new_relic_rpm_api_key');
  variable_del('new_relic_rpm_module_deployment');
  variable_del('new_relic_rpm_app_name');
}

/**
 * Set New Relic RPM module's weight to very low.
 *
 * @see new_relic_rpm_install()
 */
function new_relic_rpm_update_6001() {
  $ret = array();
  // TODO update_sql has been removed. Use the database API for any schema or data changes.
  $ret[] = array() /* update_sql("UPDATE {system} SET weight = -20 WHERE name = 'new_relic_rpm'") */;
  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
}

/**
 * Remove variable based app name and use the hard coded ini value.
 *
 * Since the ini value is required for newrelic to function correctly anyways,
 * it only makes sense that we go ahead and use it for our deployments as well.
 * This is doubly true since we document requiring this to be the same as the
 * value used by the rest of the monitoring.
 */
function new_relic_rpm_update_6002() {
  variable_del('new_relic_rpm_app_name');
}
